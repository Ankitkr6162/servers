package api.dao;

import api.databaseconnector.DatabaseConnector;
import api.model.MainBody;
import api.model.Measure;
import api.model.Program;
import api.model.SupportingFact;


import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;

import static java.sql.DriverManager.getConnection;

public class UdsCdeDao {
    
    public Map<String, List<SupportingFact>> generateMeasureSupportingFacts(){
        Map<String, List<SupportingFact>> supportingFactsMap = new HashMap<>();
        final  String query = "SELECT\n" +
                "   (\n" +
                "    CASE\n" +
                "      WHEN C3 = 1 THEN ''\n" +
                "      WHEN C3 = 0  AND qid = '201' AND C5 <> '' THEN 'Cervical Cancer Screening Not Done'\n" +
                "      WHEN C3 = 0  AND qid = '203' AND C5 <> '' THEN 'HIV Cancer Screening Not Done'\n" +
                "      WHEN C3 = 0  AND qid = '205' AND C5 <> '' THEN 'Vitals Not Taken'\n" +
                "      WHEN C3 = 0  AND qid = '205' AND C6 <> '' AND C9 = 1 THEN 'BELOW NORMAL BMI FOLLOW UP Not Done'\n" +
                "      WHEN C3 = 0  AND qid = '205' AND C6 <> '' AND C9 = 2 THEN 'ABOVE NORMAL BMI FOLLOW UP Not Done'\n" +
                "      WHEN C3 = 0  AND qid = '208' AND C5 <> '' THEN 'Colorectal Cancer Screening Not Done'\n" +
                "      WHEN C3 = 0  AND qid = '213' AND C5 <> '' THEN 'Vitals Not Taken'\n" +
                "      WHEN C3 = 0  AND qid = '213' AND C6 <> '' THEN 'FOLLOW UP Not Done'\n" +
                "      WHEN C3 = 0  AND qid = '213' AND C7 <> '' THEN 'Child BMI Additional Follow up not Done'\n" +
                "      WHEN C3 = 0  AND qid = '218' AND C5 <> '' THEN 'IVD Medication'\n" +
                "      WHEN C3 = 0  AND qid = '220' AND C5 <> '' THEN 'Depression Screening Not Done'\n" +
                "      WHEN C3 = 0  AND qid = '220' AND C6 <> '' AND C9 = 1 THEN 'Depression Screening Follow Up Not Done'\n" +
                "      WHEN C3 = 0 AND qid = '223' AND C5 <> '' THEN 'Not Achieved Remission or PHQ-9 Score >= 10 or PHQ2(OLD) YES TO EITHER OR PHQ2(NEW) >= 3 OR PHQA (Score >= 10 or yes to Question 12/13) '\n" +
                "      WHEN C3 = 0 AND qid = '225' AND C5 <> '' THEN 'HbA1c < 9'\n" +
                "      WHEN C3 = 0 AND qid = '228' AND C5 <> '' THEN 'Blood Pressure > 140/90 mm Hg'\n" +
                "      WHEN C3 = 0 AND qid = '230' AND C5 <> '' THEN 'No Active Statin Medication'\n" +
                "      WHEN C3 = 0 AND qid = '232' AND C5 <> '' THEN 'Tobacco Screening Not Done'\n" +
                "      WHEN C3 = 0 AND qid = '232' AND C5 <> '' AND C9 = 1 THEN 'Tobacco Follow Up Not Done'\n" +
                "      WHEN C3 = 0 AND qid = '234' AND C5 <> '' THEN 'Mammogram Screening Not Done'\n" +
                "      END\n" +
                "  )   AS 'Supporting_Facts',\n" +
                "  (CASE \n" +
                "  WHEN CAST(qid AS CHAR(10)) = '201' THEN 'Cervical Cancer Screening'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '203' THEN 'HIV Screening'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '205' THEN 'Adult BMI'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '208' THEN 'Colorectal Cancer Screening'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '213' THEN 'Childhood BMI'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '218' THEN 'IVD'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '220' THEN 'Depression Screening'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '223' THEN 'Depression Remission'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '225' THEN 'Diabetes'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '228' THEN 'Hypertension'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '230' THEN 'Statin Therapy'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '232' THEN 'Tobacco Screening'\n" +
                "  WHEN CAST(qid AS CHAR(10)) = '234' THEN 'Breast Cancer Screening'\n" +
                "END\n" +
                ") AS 'Measure_Name',\n" +
                "  c2 AS 'Patient_id'\n" +
                "FROM\n" +
                "  ebo_cde_detail\n" +
                "WHERE\n" +
                "  CAST(qid AS CHAR(255)) IN ( '201','203','205','208','213','218','220','223','225','228','230','232','235') AND c2 = ?";

        String patientId = "9912";
        try {
            Connection connection = DatabaseConnector.getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1,patientId);

            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
               String measureName = rs.getString("Measure_Name");
               SupportingFact supportingFact = new SupportingFact();
               supportingFact.setName(rs.getString("Supporting_Facts"));
               supportingFactsMap.computeIfAbsent(measureName, k -> new ArrayList<>()).add(supportingFact);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return supportingFactsMap;
    }




    public List<Measure> generateMeasures() {
        List<Measure> measures = new ArrayList<>();
        final String query = "  SELECT \n" +
                "                DISTINCT (CASE  \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '201' THEN 'Cervical Cancer Screening' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '203' THEN 'HIV Screening' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '205' THEN 'Adult BMI' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '208' THEN 'Colorectal Cancer Screening' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '213' THEN 'Childhood BMI' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '218' THEN 'IVD' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '220' THEN 'Depression Screening' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '223' THEN 'Depression Remission' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '225' THEN 'Diabetes' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '228' THEN 'Hypertension' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '230' THEN 'Statin Therapy' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '232' THEN 'Tobacco Screening' \n" +
                "                WHEN CAST(qid AS CHAR(10)) = '234' THEN 'Breast Cancer Screening' \n" +
                "                END \n" +
                "                ) AS 'Measure_Name', \n" +
                "                (CASE  \n" +
                "                WHEN C3 = 0 THEN 'Non-Compliant' \n" +
                "                WHEN C3 = 1 THEN 'Compliant' \n" +
                "                END) AS 'Outcome' \n" +
                "                ,c2 AS 'Patient_id' \n" +
                "                FROM eBO_CDE_DETAIL WHERE CAST(qid AS CHAR(255)) IN ('201','203', '205','208', '213', '218', '220', '223', '225', '228', '230', '232', '234') AND c2 = ?";

       String patientId = "9912";
        try (Connection con = DatabaseConnector.getConnection();
             PreparedStatement pstmt = con.prepareStatement(query)) {
            pstmt.setString(1,patientId);


            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Measure measure = new Measure();
                    measure.setName(rs.getString("Measure_Name"));
                    measure.setOutcome(rs.getString("Outcome"));
                    measure.setOSSelectionType("orderset");
                    measures.add(measure);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return measures;
    }

    public List<Program> generatePrograms() {

        List<Program> programs = new ArrayList<>();
        final String query = "select distinct cdename as 'Program_Name' from eBO_CDE_DETAIL where cdename = 'UDS'";

        try (Connection con = DatabaseConnector.getConnection()) {
            PreparedStatement pstmt = con.prepareStatement(query);

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Program program = new Program();
                    program.setName(rs.getString("Program_Name"));
                    programs.add(program);
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return programs;
    }





    public void setUserInfo(String patientId, MainBody mainBody) {
        final String query = "SELECT c2 AS Patient_id FROM ebo_cde_detail WHERE CAST(qid AS CHAR(255)) IN ('201','203', '205','208', '213', '218', '220', '223', '225', '228', '230', '232', '234') AND  c2 = ?";

        patientId = "10762";
        try (Connection con = DatabaseConnector.getConnection();
             PreparedStatement pstmt = con.prepareStatement(query)) {
            pstmt.setString(1, patientId);

            ResultSet rs = pstmt.executeQuery();
            if (rs.next()){

                mainBody.setId(rs.getString("Patient_id"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void setMeasurePeriod(MainBody mainBody) {

        final  String query = "SELECT DISTINCT CAST(CONCAT('01/', '01/', YEAR(logdatetime)) AS CHAR(12)) AS 'Measure_Start', CAST(CONCAT('12/', '31/', YEAR(logdatetime)) AS CHAR(12)) AS 'Measure_End' \n" +
                "FROM ebo_cde_detail\n" +
                "WHERE CAST(qid AS CHAR(255)) IN ('201', '203', '205','208', '213', '218', '220', '223', '225', '228', '230', '232', '234')";

        try (Connection con = DatabaseConnector.getConnection()) {
            PreparedStatement psmt = con.prepareStatement(query);

            ResultSet rs = psmt.executeQuery();
            if (rs.next()){
                mainBody.setMeasurementPeriodStartDate(rs.getString("Measure_Start"));
                mainBody.setMeasurementPeriodEndDate(rs.getString("Measure_End"));
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


}














package api.controller;

import api.dao.UdsCdeDao;
import api.model.*;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/cde")
public class EboCdeController {
    UdsCdeDao udsCdeDao = new UdsCdeDao();

    @GetMapping("/details")
    public MainBody mainBody(String patientId, MainBody mainBody) {
        
        List<Measure> measures = udsCdeDao.generateMeasures();
        Map<String, List<SupportingFact>> supportingFactMap = udsCdeDao.generateMeasureSupportingFacts();

        if (measures != null && !measures.isEmpty()) {
            for (Measure measure : measures) {
                List<SupportingFact> measureSuportingFacts = supportingFactMap.get(measure.getName());
                measure.setSupportingFacts(measureSuportingFacts);
            }
            List<Program> programs = udsCdeDao.generatePrograms();
            if (programs != null && !programs.isEmpty()) {
                for (Program program : programs) {
                    program.setMeasures(measures);
                }
                mainBody.setPrograms(programs);
                return mainBody;
            } else {
                return new MainBody();
            }
        } else {
            return null;
        }
    }
}




public JsonObject getClinicalQualityAlerts(int pid) {
        JsonObject cqaJson= new JsonObject();
        JsonArray cqaEmptyJsonARR = new JsonArray();
        try {
            String cqAlerts = new HedisRightChartPanel().generate(pid);
            JsonElement el = JsonParser.parseString(cqAlerts);
            JsonObject cqaHedisRowsJson = el.getAsJsonObject();

            if(cqaHedisRowsJson.has("programs") && !cqaHedisRowsJson.get("measurementPeriodStartDate").isJsonNull() && !cqaHedisRowsJson.get("measurementPeriodEndDate").isJsonNull()) {
                String measurementPeriod = cqaHedisRowsJson.get("measurementPeriodStartDate").getAsString() + "-" + cqaHedisRowsJson.get("measurementPeriodEndDate").getAsString();
                JsonArray programDetailsArr = cqaHedisRowsJson.getAsJsonArray("programs");
                JsonArray cqaJsonARR = new JsonArray();
                for(int i=0;i<programDetailsArr.size();i++) {
                    String programName = programDetailsArr.get(i).getAsJsonObject().get("name").getAsString();
                    JsonArray measureDetailsArr = programDetailsArr.get(i).getAsJsonObject().get("measures").getAsJsonArray();
                    for (int j=0;j<measureDetailsArr.size();j++){
                        JsonObject cqaRowsJson = new JsonObject();
                        cqaRowsJson.addProperty("programName", programName);
                        cqaRowsJson.addProperty("fqn", measureDetailsArr.get(j).getAsJsonObject().get("fqn").getAsString());
                        cqaRowsJson.addProperty("name", measureDetailsArr.get(j).getAsJsonObject().get("name").getAsString());
                        cqaRowsJson.addProperty("measurePeriod", measurementPeriod);
                        cqaRowsJson.addProperty("outcome", measureDetailsArr.get(j).getAsJsonObject().get("outcome").getAsString());
                        setOrderSetOrOrder(measureDetailsArr, j, cqaRowsJson);
                        JsonArray suppFactsArr = measureDetailsArr.get(j).getAsJsonObject().get("supporting_facts").getAsJsonArray();
                        cqaRowsJson.add("supporting_facts", suppFactsArr);
                        cqaJsonARR.add(cqaRowsJson);
                    }
                }
                cqaJson.add("hedisGaps",cqaJsonARR);
            }
            else {
                cqaJson.add("hedisGaps", cqaEmptyJsonARR);
            }
        }catch (Exception ex) {
            LOGGER.error(ex.getMessage(), ex);
        }
        return cqaJson;
    }

{
    "programs": [
        {
            "programName": "UDS",
            "udsMeasures": [
                {
                    "name": "Cervical Cancer Screening",
                    "outcome": "Non-Compliant",
                    "ordersetEncId": "25545",
                    "osSelectionType": "orderset",
                    "udsSupportingFacts": [
                        {
                            "name": "Cervical Cancer Screening Not Done"
                        }
                    ]
                },
                {
                    "name": "HIV Screening",
                    "outcome": "Non-Compliant",
                    "ordersetEncId": null,
                    "osSelectionType": "orderset",
                    "udsSupportingFacts": [
                        {
                            "name": "HIV Cancer Screening Not Done"
                        }
                    ]
                },
                {
                    "name": "Adult BMI",
                    "outcome": "Non-Compliant",
                    "ordersetEncId": null,
                    "osSelectionType": "orderset",
                    "udsSupportingFacts": [
                        {
                            "name": "Vitals Not Taken"
                        }
                    ]
                },
                {
                    "name": "Colorectal Cancer Screening",
                    "outcome": "Compliant",
                    "ordersetEncId": null,
                    "osSelectionType": "orderset",
                    "udsSupportingFacts": [
                        {
                            "name": ""
                        }
                    ]
                }
            ]
        }
    ],
    "measurementPeriodStartDate": "01/01/0",
    "measurementPeriodEndDate": "12/31/0"
}


{
  "hedisGaps": [
    {
      "programName": "Access/Availability of Care",
      "fqn": "2020_AAP-02",
      "name": "HEDIS 2020 Adults Access to Preventive Services(AAP) Age: 45-64 Commercial : Adjusted, Certified, Unaudited HEDIS Rate",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "EXCLUDED",
      "osSelectionType": "orderset",
      "itemName": "Abrasions (minor)-adult",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Access/Availability of Care",
      "fqn": "MY2020_AAP-02",
      "name": "Adults Access to Preventive Services(AAP) Age: 45-64 Commercial : Adjusted, Certified, Unaudited HEDIS Rate",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "ACHIEVED",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Access/Availability of Care",
      "fqn": "MY2021_AAP-02",
      "name": "Adults Access to Preventive Services(AAP) Age: 45-64 Commercial : Adjusted, Certified, Unaudited HEDIS Rate",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "NOT_ACHIEVED",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Cardiac ",
      "fqn": "NQF0066",
      "name": "CAD: ACE/ARB Therapy for Patients with Diabetes or LVEF less than 40%",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "NOT_ACHIEVED",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Prevention and Screening",
      "fqn": "2020_ABA",
      "name": "HEDIS 2020 Adult BMI Assessment - Adjusted, Certified, Unaudited HEDIS Rate",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "NOT_ACHIEVED",
      "osSelectionType": "lab",
      "itemName": "TSH",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Prevention and Screening",
      "fqn": "2020_COL",
      "name": "HEDIS 2020 Colorectal Cancer Screening : 2020 Adjusted, Certified, Unaudited HEDIS Rate",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "NOT_ACHIEVED",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Prevention and Screening",
      "fqn": "COL",
      "name": "Colorectal Cancer Screening",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "NOT_ACHIEVED",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Prevention and Screening",
      "fqn": "CQM_COL",
      "name": "HEDIS MY2022 Colorectal Cancer Screening (COL) - Adjusted, Certified, Unaudited HEDIS Rate",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "NOT_ACHIEVED",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Prevention and Screening",
      "fqn": "MY2020_COL",
      "name": "MY2020_COL: HEDIS MY2020 Colorectal Cancer Screening (COL) - Adjusted, Certified, Unaudited HEDIS Rate",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "NOT_ACHIEVED",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Prevention and Screening",
      "fqn": "MY2021_COL",
      "name": "MY2021_COL: HEDIS MY2021 Colorectal Cancer Screening (COL) - Adjusted, Certified, Unaudited HEDIS Rate",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "EXCLUDED",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Prevention and Screening",
      "fqn": "NQF1690",
      "name": "Adult BMI Assessment",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "EXCLUDED",
      "supporting_facts": [
      ]
    },
    {
      "programName": "Respiratory ",
      "fqn": "COVID19-2",
      "name": "COVID-19 Diagnosis",
      "measurePeriod": "09/01/2021-09/01/2022",
      "outcome": "NOT_ACHIEVED",
      "supporting_facts": [
      ]
    }
  ]
}







